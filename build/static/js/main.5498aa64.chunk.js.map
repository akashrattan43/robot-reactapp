{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredrobots","filter","robot","toLowerCase","includes","length","classNAme","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAA4B,IAAzBC,EAAyBD,EAAzBC,KAAOC,EAAkBF,EAAlBE,MAAQC,EAAUH,EAAVG,GAE3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACzBC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCUGS,EAhBE,SAAAX,GAAc,IAAZY,EAAYZ,EAAZY,OACTC,EAAgBD,EAAOE,IAAI,SAACC,EAAKC,GACnC,OAAQZ,EAAAC,EAAAC,cAACW,EAAD,CACRC,IAAKF,EACLb,GAAIS,EAAOI,GAAGb,GACdF,KAAMW,EAAOI,GAAGf,KAChBC,MAAOU,EAAOI,GAAGd,UAIrB,OACAE,EAAAC,EAAAC,cAAA,WACCO,ICHUM,EAVG,SAAAnB,GAAiCA,EAA/BoB,YAA+B,IAAlBC,EAAkBrB,EAAlBqB,aAC7B,OAAQjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACnBH,EAAAC,EAAAC,cAAA,SACAC,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEHI,SARD,SAACC,GACX,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAkBC,OAAO,UAC9DJ,EAAMK,YCwCJC,cAtCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAACtB,YAAaqB,EAAME,OAAOC,SAfzCX,EAAKY,MAAM,CACPjC,OAAQ,GACRQ,YAAa,IAJRa,mFAQO,IAAAa,EAAAV,KAChBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAGL,EAAKJ,SAAS,CAAC9B,OAAOuC,uCAShC,IAAAC,EACwBhB,KAAKS,MAAzBjC,EADJwC,EACIxC,OAAOQ,EADXgC,EACWhC,YACTiC,EAAezC,EAAO0C,OAAO,SAAAC,GAC/B,OAAOA,EAAMtD,KAAKuD,cAAcC,SAASrC,EAAYoC,iBAEzD,OAAQ5C,EAAO8C,OAGnBtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIqD,UAAU,MAAd,eACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAWvC,aAAce,KAAKI,iBAC9BpC,EAAAC,EAAAC,cAACuD,EAAD,KACAzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,OAAQyC,MANbjD,EAAAC,EAAAC,cAAA,4BA3BSyD,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.5498aa64.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name , email , id } ) => {\n    \n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n        <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n        </div></div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const cardComponent = robots.map((user,i) => {\n        return (<Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        email={robots[i].email} />\n        );\n    })\n    \n    return (\n    <div>\n    {cardComponent}\n    </div>\n    );\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (<div className='pa2'>\n        <input\n        className='pa3 ba b--green bg-lightest-blue' \n        type='search' \n        placeholder='search robots' \n        onChange={searchChange}/>\n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll =(props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React,{Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>  response.json())\n        .then(users=> this.setState({robots:users}))\n \n        \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n     \n    render(){\n        const { robots,searchfield}=this.state;\n        const filteredrobots=robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        return !robots.length ?\n         <h1>Loading</h1>:\n         (\n    <div className='tc'>\n    <h1 classNAme=\"f1\">RoboFriends</h1>\n    <SearchBox searchChange={this.onSearchChange}/>\n    <Scroll>\n    <CardList robots={filteredrobots} />\n    </Scroll>\n    </div>\n    );\n    }\n} \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}